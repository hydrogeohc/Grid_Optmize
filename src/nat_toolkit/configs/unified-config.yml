# SPDX-FileCopyrightText: Copyright (c) 2024-2025, Grid Optimization Project  
# SPDX-License-Identifier: Apache-2.0

# Unified NAT Grid Configuration
# Combines functionality from nat_grid_toolkit and nat_grid_workflow

general:
  use_uvloop: true

# Large Language Models Configuration
llms:
  # Primary LLM for grid optimization (OpenAI GPT-4o)
  grid_llm:
    _type: openai
    model_name: gpt-4o
    max_tokens: 4096
    temperature: 0.1
    
  # High-performance NVIDIA NIM option (requires NVIDIA API key)
  nim_llm:
    _type: nim
    model_name: meta/llama-3.1-70b-instruct
    temperature: 0.0
    max_tokens: 2048
    
  # Backup/fallback LLM
  backup_llm:
    _type: openai
    model_name: gpt-4o-mini
    max_tokens: 2048
    temperature: 0.1

# Unified Grid Optimization Functions
functions:
  # Modern NAT toolkit functions
  grid_optimize:
    _type: grid_optimize
    description: "Modern grid optimization with comprehensive analysis"
    
  grid_status:
    _type: grid_status
    description: "Real-time grid monitoring and status reporting"
    
  grid_analyze:
    _type: grid_analyze
    description: "Advanced grid performance analysis and trends"
    
  # Legacy compatibility functions (nat_grid_workflow)
  "nat_grid_optimization/optimize_grid":
    _type: "nat_grid_optimization/optimize_grid"
    description: "Legacy grid optimization function (backward compatibility)"
    
  "nat_grid_optimization/show_last_optimization":
    _type: "nat_grid_optimization/show_last_optimization"
    description: "Legacy optimization results display (backward compatibility)"
    
  # Utility functions
  current_datetime:
    _type: current_datetime
    description: "Current date and time for operations"

# Main Workflow Configuration (React Agent)
workflow:
  _type: react_agent
  tool_names:
    - grid_optimize
    - grid_status  
    - grid_analyze
    - current_datetime
  llm_name: grid_llm
  max_iterations: 8
  verbose: true
  parse_agent_response_max_retries: 3
  
  # Enhanced system message combining both toolkits
  system_message: |
    You are an advanced AI agent for intelligent power grid optimization and management.
    
    Core Capabilities:
    - üîÑ Autonomous grid optimization to minimize power losses
    - üìä Real-time monitoring and predictive analytics  
    - üîç Performance analysis with trend identification
    - üõ°Ô∏è Safety-first approach with regulatory compliance
    - üåê Multi-region grid management and coordination
    
    Available Tools:
    - grid_optimize: Perform comprehensive grid optimization
    - grid_status: Monitor current grid conditions and alerts
    - grid_analyze: Analyze performance metrics and trends
    - current_datetime: Get timestamps for operations
    
    Operational Guidelines:
    1. Always prioritize grid stability and safety
    2. Provide clear explanations of optimization actions
    3. Include relevant metrics and performance indicators
    4. Consider both immediate and long-term impacts
    5. Explain reasoning behind recommendations
    6. Monitor for regulatory compliance requirements
    
    When optimizing grids:
    - Assess current conditions before making changes
    - Consider supply-demand balance and grid constraints
    - Minimize losses while maintaining reliability
    - Provide cost-benefit analysis when possible
    - Schedule maintenance recommendations appropriately

# Legacy Workflow Configuration (backward compatibility)
legacy_workflow:
  _type: react_agent
  tool_names:
    - "nat_grid_optimization/optimize_grid"
    - "nat_grid_optimization/show_last_optimization"
    - current_datetime
  llm_name: nim_llm
  verbose: true
  parse_agent_response_max_retries: 3
  system_message: |
    You are a grid optimization assistant. You help users optimize electrical grid supply 
    and demand to minimize losses. You can:
    
    1. Optimize grid supply for any region using optimize_grid
    2. Show the latest optimization results using show_last_optimization
    3. Provide analysis and recommendations based on the optimization results
    
    Always explain your reasoning and provide clear recommendations. When optimizing,
    consider factors like supply-demand balance, grid losses, and regional constraints.

# API Server Configuration (optional)
api_server:
  host: "0.0.0.0"
  port: 8001
  cors:
    allow_origins: ["*"]
    allow_methods: ["GET", "POST", "PUT", "DELETE"]
    allow_headers: ["*"]

# Observability and Monitoring
observability:
  enable_telemetry: true
  telemetry_exporters:
    console:
      _type: console
      log_level: INFO
    file:
      _type: file
      log_file: "logs/grid_optimization.log"
      log_level: DEBUG